ifndef NRF5_SDK_ROOT
  $(error NRF5_SDK_ROOT not defined! You must specify where nRF52 SDK resides!)
endif

ifneq ($(filter %.flash erase,$(MAKECMDGOALS)),)
ifeq ($(NRF52_JLINK_PATH),)
NRF52_JLINK_PATH:=$(shell location=$$(which JLinkExe) && dirname $$location)
endif
ifeq ($(NRF52_JLINK_PATH),)
  $(error JLink not found in PATH and NRF52_JLINK_PATH path is not defined)
endif
endif

CLEAN += *.jlink

ifeq ($(NRF52840_USE_RTT),1)
### Suppress the existing debug I/O in os/lib
CFLAGS += -DNRF52840_USE_RTT=1
MAKE_WITH_LIB_DBG_IO = 0
CONTIKI_TARGET_DIRS += rtt
CONTIKI_CPU_SOURCEFILES += rtt-printf.c segger-rtt.c segger-rtt-printf.c
else
CONTIKI_CPU_SOURCEFILES += dbg.c
endif

# Boards
ifeq ($(BOARD), dongle)
LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52840-bootloader.ld
CFLAGS += -DBOARD_PCA10059
else
LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52840.ld
CFLAGS += -DBOARD_PCA10056
endif

# JLink
JLINK := $(NRF52_JLINK_PATH)/JLinkExe
JLINK_OPTS = -Device NRF52 -if swd -speed 1000
ifneq ($(NRF52_JLINK_SN),)
JLINK_OPTS += -SelectEmuBySN $(NRF52_JLINK_SN)
endif

### CPU-dependent directories
CONTIKI_CPU_DIRS += . dev rf

### CPU-dependent source files
CONTIKI_CPU_SOURCEFILES += clock.c rtimer-arch.c uart0.c dbg.c watchdog.c
CONTIKI_CPU_SOURCEFILES += int-master.c slip-arch.c
CONTIKI_CPU_SOURCEFILES += nrf52840-ieee.c

CONTIKI_SOURCEFILES += $(CONTIKI_CPU_SOURCEFILES)

CFLAGS += -DNRF52840_XXAA
CFLAGS += -D__HEAP_SIZE=512
CFLAGS += -DSWI_DISABLE0
CFLAGS += -DCONFIG_GPIO_AS_PINRESET
CFLAGS += -ggdb
CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16

LDFLAGS += -mabi=aapcs -mfloat-abi=hard -mfpu=fpv4-sp-d16
LDFLAGS += --specs=nano.specs -lc -lnosys
LDFLAGS += -L $(NRF5_SDK_ROOT)/modules/nrfx/mdk

#nRF52 SDK sources
NRF52_SDK_C_SRCS += components/boards/boards.c \
  components/libraries/util/app_error.c \
  components/libraries/util/app_error_handler_gcc.c \
  components/libraries/util/app_error_weak.c \
  components/libraries/util/nrf_assert.c \
  components/libraries/util/app_util_platform.c \
  components/libraries/queue/nrf_queue.c \
  components/libraries/strerror/nrf_strerror.c \
  modules/nrfx/drivers/src/nrfx_clock.c \
  modules/nrfx/drivers/src/nrfx_rtc.c \
  modules/nrfx/drivers/src/nrfx_gpiote.c \
  modules/nrfx/drivers/src/nrfx_rng.c \
  modules/nrfx/drivers/src/nrfx_wdt.c \
  modules/nrfx/mdk/system_nrf52840.c \
  integration/nrfx/legacy/nrf_drv_clock.c \
  integration/nrfx/legacy/nrf_drv_rng.c \
  components/libraries/fifo/app_fifo.c \

NRF52_SDK_ASM_SRCS = modules/nrfx/mdk/gcc_startup_nrf52840.S

CONTIKI_SOURCEFILES += $(notdir $(NRF52_SDK_C_SRCS))
CONTIKI_SOURCEFILES += $(notdir $(NRF52_SDK_ASM_SRCS))

# Include folders common to all targets
NRF52_SDK_INC_PATHS += modules/nrfx
NRF52_SDK_INC_PATHS += modules/nrfx/mdk
NRF52_SDK_INC_PATHS += modules/nrfx/hal
NRF52_SDK_INC_PATHS += modules/nrfx/soc
NRF52_SDK_INC_PATHS += modules/nrfx/drivers/src
NRF52_SDK_INC_PATHS += modules/nrfx/drivers/include
NRF52_SDK_INC_PATHS += components/libraries/experimental_section_vars
NRF52_SDK_INC_PATHS += components/libraries/strerror
NRF52_SDK_INC_PATHS += components/libraries/delay
NRF52_SDK_INC_PATHS += components/libraries/util
NRF52_SDK_INC_PATHS += components/boards
NRF52_SDK_INC_PATHS += integration/nrfx
NRF52_SDK_INC_PATHS += integration/nrfx/legacy
NRF52_SDK_INC_PATHS += components/libraries/queue
NRF52_SDK_INC_PATHS += components/libraries/fifo
NRF52_SDK_INC_PATHS += components/libraries/log
NRF52_SDK_INC_PATHS += components/libraries/log/src
NRF52_SDK_INC_PATHS += components/drivers_nrf/nrf_soc_nosd

EXTERNALDIRS += $(addprefix $(NRF5_SDK_ROOT)/, $(NRF52_SDK_INC_PATHS))

include $(ARCH_PATH)/cpu/arm/cortex-m/cm4/Makefile.cm4

JLINK_DIR = $(CONTIKI_CPU)/jlink

%.jlink: $(OUT_HEX) %.$(TARGET)
	sed -e 's,#OUTPUT_FILENAME#,$<,' $(JLINK_DIR)/flash.jlink > $@

%.flash: %.jlink
	@echo Flashing: $^
	$(JLINK) $(JLINK_OPTS) -CommanderScript $*.jlink

erase:
	$(JLINK) $(JLINK_OPTS) -CommanderScript $(JLINK_DIR)/erase.jlink

# DFU Upload for dongles

NRFUTIL = nrfutil
NRFUTIL_FLAGS += -e -w -v

ifdef PORT
  DFU_FLAGS += -p $(PORT)
endif

%.dfu-upload: $(OUT_HEX) %.$(TARGET)
ifeq (, $(shell which nrfutil))
	@echo "ERROR: Could not find nrfutil, please install it first"
else
	$(NRFUTIL) pkg generate --hw-version 52 --sd-req 0x00 --debug-mode --application $< $(BUILD_DIR_BOARD)/nrf52840_dfu_image.zip   
	$(NRFUTIL) dfu usb-serial $(DFU_FLAGS) -pkg $(BUILD_DIR_BOARD)/nrf52840_dfu_image.zip                      
endif
